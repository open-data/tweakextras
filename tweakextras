#!/usr/bin/env python
"""
perform adjustments on dataset extras

Usage:
  tweakextras [ -n ] [-u ID_OR_NAME ...] [-r SITE_URL] [-a APIKEY]
              (EXTRA=VALUE | -d EXTRA) ...

  tweakextras -h
  tweakextras --version

Options:
  -h                       show this screen
  --version                show version
  -n --no-overwrite        do not overwrite existing values
  -a --apikey=APIKEY       API key to use for remote actions
  -d --delete=EXTRA        remove extra if present
  -u --update=ID_OR_NAME   specify datasets to update on command line
                           instead of reading json lines on stdin
  -r --remote=SITE_URL     URL of CKAN server
                           [default: http://ndmckand1.statcan.ca/zj]

This command re-reads each dataset before updating the extras to minimize
the potential for data loss due to a user editing the dataset at the same
time.

Output includes the names/ids of datasets being updated followed by
extraname(d) for deleted extras, extraname(=) for updated extras,
extraname(#) for ignored extras and extraname(+) for added extras.
"""

__version__ = '0.3'

from docopt import docopt
import ckanapi
import json
import sys


def main():
    arguments = docopt(__doc__, version=__version__)
    ckan = ckanapi.RemoteCKAN(arguments['--remote'],
        apikey=arguments['--apikey'],
        user_agent="tweakextras/{version}".format(version=__version__))

    datasets = arguments['--update']
    if not datasets:
        datasets = ids_from_stdin()

    for name in datasets:
        print name,

        d = ckan.action.package_show(id=name)
        
        extras = dict((e['key'], e['value']) for e in d['extras'])
        for kv in arguments['EXTRA=VALUE']:
            kv = kv.decode('utf-8')
            ename, value = kv.split('=', 1)
            if ename in extras:
                if extras[ename] and arguments['--no-overwrite']:
                    print ename + '(#)',
                else:
                    extras[ename] = value
                    print ename + '(=)',
            else:
                extras[ename] = value
                print ename + '(+)',

        for ename in arguments['--delete']:
            if ename in extras:
                del extras[ename]
                print ename + '(d)',

        d['extras'] = [{'key': k, 'value': v} for (k, v) in extras.items()]
        print
        ckan.action.package_update(**d)


def ids_from_stdin():
    for ln in sys.stdin.readlines():
        yield json.loads(ln)['id']

main()
